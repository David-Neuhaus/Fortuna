#ifndef ISR_H
#define ISR_H

/* Variable Definitions */

char *irq_name[] =
{
"Programmable Interrupt Timer",
"Keyboard",
"Cascade (should not raise",
"COM2",
"COM1",
"LPT2",
"Floppy Disk",
"LPT1 / spurious interrupt",
"CMOS real-time clock",
"Peripherals/SCSI/NIC",
"Peripherals/SCSI/NIC",
"Peripherals/SCSI/NIC",
"PS2 Mouse",
"FPU / Coprocessor / Inter-processor",
"Primary ATA Hard Disk",
"Secondary ATA Hard Disk"
};


char *exception_name[] =
{
"Division By Zero Exception",
"Debug Exception",
"Non Maskable Interrupt Exception",
"Breakpoint Exception",
"Into Detected Overflow Exception",
"Out of Bounds Exception",
"Invalid Opcode Exception",
"No Coprocessor Exception",
"Double Fault Exception",
"Coprocessor Segment Overrun Exception",
"Bad TSS Exception",
"Segment Not Present Exception",
"Stack Fault Exception",
"General Protection Fault Exception",
"Page Fault Exception",
"Unknown Interrupt Exception",
"Coprocessor Fault Exception",
"Alignment Check Exception",
"Machine Check Exception",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered",
"Reservered"
};


/* Functions */
struct cpu_state* handle_exception(struct cpu_state*);
struct cpu_state* handle_irq(struct cpu_state*);
struct cpu_state* handle_syscall(struct cpu_state*);

#endif /* ISR_H */
